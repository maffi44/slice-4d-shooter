name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    name: Build and Deploy to EC2
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      
    - name: Set up SSH access to EC2
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Install tomlq
      run: |
        pip install tomlq

    - name: Extract version from Cargo.toml
      id: cargo_version
      run: |
        version=$(tomlq -r '.package.version' Cargo.toml)
        echo "VERSION=$version" >> $GITHUB_ENV

    - name: SSH into EC2 and deploy
      run: |
        NEW_MATCHMAKING="/opt/4dShooter/slice-4d-shooter/target/x86_64-unknown-linux-gnu/release/matchmaking_server"
        OLD_MATCHMAKING="/opt/4dShooter/matchmaking_server"
        NEW_GAME="/opt/4dShooter/slice-4d-shooter/target/x86_64-unknown-linux-gnu/release/game_server"
        OLD_GAME="/opt/4dShooter/game_server"

        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
          NEW_MATCHMAKING="$NEW_MATCHMAKING" \
          OLD_MATCHMAKING="$OLD_MATCHMAKING" \
          NEW_GAME="$NEW_GAME" \
          OLD_GAME="$OLD_GAME" \
          bash -s <<EOF
            set -e

            cd /opt/4dShooter/slice-4d-shooter
            git pull origin main

            cargo build --release -p matchmaking_server
            cargo build --release -p game_server

            jq '.current_game_version = "${{ env.VERSION }}"' /opt/4dShooter/matchmaking-server-config.json > /tmp/config.tmp
            sudo mv /tmp/config.tmp /opt/4dShooter/matchmaking-server-config.json
            echo "Update matchmaking-server-config.json version to ${{ env.VERSION }}"
            
            if [ -f "$NEW_MATCHMAKING" ] && [ -f "$OLD_MATCHMAKING" ] && [ -f "$NEW_GAME" ] && [ -f "$OLD_GAME" ]; then
              if ! cmp -s "$NEW_MATCHMAKING" "$OLD_MATCHMAKING" && ! cmp -s "$NEW_GAME" "$OLD_GAME"; then
                echo "Restarting matchmaking.service due to binary changes..."
                sudo systemctl stop matchmaking.service
                cp "\$NEW_MATCHMAKING" "\$OLD_MATCHMAKING"
                cp "\$NEW_GAME" "\$OLD_GAME"
                sudo systemctl start matchmaking.service
              else
                echo "No changes in binaries. Skipping restart."
              fi
            else
              ls -la "$NEW_MATCHMAKING" || echo "$NEW_MATCHMAKING not found"
              ls -la "$OLD_MATCHMAKING" || echo "$OLD_MATCHMAKING not found"
              ls -la "$NEW_GAME" || echo "$NEW_GAME not found"
              ls -la "$OLD_GAME" || echo "$OLD_GAME not found"
            fi
        EOF

